#!/bin/bash

# include bpkg  dependencies
source /bashutil/retry
source /bashutil/bgo
source /bashutil/bgowait

[[ -z "${LIVY_EXECUTION_MODE}" ]] && mode='local' || mode="${LIVY_EXECUTION_MODE}"

##############################################################################
# validate if all container variables are set
##############################################################################
function validate(){
  if [[ $mode == "local" ]]; then
    return 0
  elif [[ $mode == "cluster" ]]; then
    vars="SPARK_MASTER_ENDPOINT SPARK_MASTER_PORT DEPLOY_MODE"
    for var in $vars; do
        if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
            echo "$var not set but required."
            return 1
        fi
    done
  else
    echo -e "Unsupported value $LIVY_EXECUTION_MODE"
    return 1
  fi
}

##############################################################################
# write config vars with configfile template
##############################################################################
function writeConfigOptions(){
  if [ $mode == "cluster" ]; then
    echo "write config options"
    export SPARK_MASTER_ENDPOINT=$SPARK_MASTER_ENDPOINT
    export SPARK_MASTER_PORT=$SPARK_MASTER_PORT
    export DEPLOY_MODE=$DEPLOY_MODE

    cat /opt/docker-conf/livy.conf | envsubst > /opt/apache-livy-0.6.0-incubating-bin/conf/livy.conf
  fi
}

function init(){

    ## pre-config initialization

    # write file based config options
    writeConfigOptions

   

    ## post-config initialization

    ##TODO: check for Apache Spark if its running
}

##############################################################################



function livy_server_service(){

    export SPARK_HOME=/opt/spark-2.4.3-bin-hadoop2.7/
    echo "starting Livy Server!"
    /opt/apache-livy-0.6.0-incubating-bin/bin/livy-server start

    # whatever blocking call 
    tail -f /dev/null
}

function start(){

    bgo livy_server_service
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi
}

##############################################################################
function configure(){
    echo "configure: ..."
    ## post-start configuration via service
}

##############################################################################
function main(){
    # validate env vars
    validate
    if [[ $? != 0 ]]; then 
        echo "validation failed. exiting now." >&2
        exit 1
    fi

    # initialize
    init
    if [[ $? != 0 ]]; then 
        echo "init failed. exiting now." >&2
        exit 1
    fi

    # start
    start 
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi    

    # configure
    retry 5 5 "configure failed." configure
    if [[ $? != 0 ]]; then
        echo "cannot run configure." >&2
        exit 1
    fi

    # wait
    echo "done. now waiting for services."
    #freq=5; waitForN=-1; killTasks=0 # fail one, ignore (development mode)
    freq=5; waitForN=1; killTasks=1 #fail one, fail all (production mode)
    bgowait $freq $waitForN $killTasks
}

if [[ "$1" == "" ]]; then
    main
else
    exec "$@"
fi
